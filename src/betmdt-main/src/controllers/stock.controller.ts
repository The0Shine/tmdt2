import type { Request, Response, NextFunction } from "express";
import { StatusCodes } from "http-status-codes";
import Product from "../models/product.model";
import { Stock, StockHistory } from "../models/stock.model";
import { TransactionService } from "../services/transaction.service";
import HttpError from "../utils/httpError";
import { jsonOne } from "../utils/general";
import { createPageOptions } from "../utils/pagination";
import mongoose, { Types } from "mongoose";
import orderModel from "../models/order.model";

// @desc    L·∫•y t·∫•t c·∫£ phi·∫øu kho
// @route   GET /api/stock
// @access  Public
export const getStockVouchers = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const filter: any = {};

    if (req.query.type) filter.type = req.query.type;
    if (req.query.status) filter.status = req.query.status;
    if (req.query.createdBy) filter.createdBy = req.query.createdBy;

    if (req.query.startDate || req.query.endDate) {
      filter.createdAt = {};
      if (req.query.startDate)
        filter.createdAt.$gte = new Date(req.query.startDate as string);
      if (req.query.endDate) {
        const endDate = new Date(req.query.endDate as string);
        endDate.setHours(23, 59, 59, 999);
        filter.createdAt.$lte = endDate;
      }
    }

    const { page, limit, search } = createPageOptions(req);

    if (search) {
      filter.$or = [
        { voucherNumber: new RegExp(search, "i") },
        { reason: new RegExp(search, "i") },
      ];
    }

    const skip = (page - 1) * limit;

    let sort: any = { createdAt: -1 };
    if (req.query.sort) {
      const [field, order] = (req.query.sort as string).split(",");
      sort = { [field]: order === "asc" ? 1 : -1 };
    }

    const [vouchers, total] = await Promise.all([
      Stock.find(filter)
        .sort(sort)
        .skip(skip)
        .limit(limit)
        .populate("createdBy", "lastName email")
        .populate("approvedBy", "lastName email")
        .populate("rejectedBy", "lastName email")
        .populate("items.product", "name image")
        .populate("relatedOrder"),
      Stock.countDocuments(filter),
    ]);

    // KH√îNG return, ch·ªâ g·ªçi res.json
    res.status(StatusCodes.OK).json({
      success: true,
      count: vouchers.length,
      total,
      pagination: {
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
      data: vouchers,
    });
  } catch (error) {
    next(error);
  }
};

// @desc    L·∫•y phi·∫øu kho theo ID
// @route   GET /api/stock/:id
// @access  Public
export const getStockVoucherById = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id)
      .populate("createdBy", "lastName email")
      .populate("approvedBy", "lastName email")
      .populate("rejectedBy", "lastName email")
      .populate("items.product", "name image")
      .populate("relatedOrder");

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    jsonOne(res, StatusCodes.OK, voucher);
  } catch (error) {
    next(error);
  }
};

// @desc    T·∫°o phi·∫øu kho m·ªõi
// @route   POST /api/stock
// @access  Public
export const createStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { type, reason, items, notes, status, relatedOrder } = req.body;
    const userId = req.tokenPayload?._id;
    console.log(status);

    if (!items || !Array.isArray(items) || items.length === 0) {
      throw new HttpError({
        title: "missing_items",
        detail: "Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    // Validate each item
    for (const item of items) {
      if (!item.product || !item.quantity || Number(item.quantity) <= 0) {
        throw new HttpError({
          title: "invalid_item",
          detail: "Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá",
          code: StatusCodes.BAD_REQUEST,
        });
      }

      if (!mongoose.Types.ObjectId.isValid(item.product)) {
        throw new HttpError({
          title: "invalid_product_id",
          detail: `ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${item.product}`,
          code: StatusCodes.BAD_REQUEST,
        });
      }

      const product = await Product.findById(item.product);
      if (!product) {
        throw new HttpError({
          title: "product_not_found",
          detail: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi id ${item.product}`,
          code: StatusCodes.NOT_FOUND,
        });
      }

      // For export vouchers, check stock availability
      if (type === "export" && product.quantity < item.quantity) {
        throw new HttpError({
          title: "insufficient_stock",
          detail: `Kh√¥ng ƒë·ªß t·ªìn kho cho s·∫£n ph·∫©m ${product.name}. T·ªìn kho hi·ªán t·∫°i: ${product.quantity}, y√™u c·∫ßu: ${item.quantity}`,
          code: StatusCodes.BAD_REQUEST,
        });
      }
    }

    const voucher = await Stock.create({
      type,
      reason,
      items,
      notes,
      relatedOrder,
      status, // M·∫∑c ƒë·ªãnh l√† pending
      createdBy: userId,
    });

    await voucher.populate("createdBy", "lastName email");
    await voucher.populate("items.product", "name");

    console.log(`üìã ƒê√£ t·∫°o phi·∫øu kho: ${voucher.voucherNumber}`);
    jsonOne(res, StatusCodes.CREATED, voucher);
  } catch (error) {
    next(error);
  }
};

// @desc    C·∫≠p nh·∫≠t phi·∫øu kho
// @route   PUT /api/stock/:id
// @access  Public
export const updateStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id);

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    if (voucher.status !== "pending") {
      throw new HttpError({
        title: "cannot_edit",
        detail: "Ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a phi·∫øu kho ƒëang ch·ªù duy·ªát",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const updated = await Stock.findByIdAndUpdate(id, req.body, {
      new: true,
      runValidators: true,
    })
      .populate("createdBy", "lastName email")
      .populate("items.product", "name");

    jsonOne(res, StatusCodes.OK, updated);
  } catch (error) {
    next(error);
  }
};

// @desc    X√≥a phi·∫øu kho
// @route   DELETE /api/stock/:id
// @access  Public
export const deleteStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id);

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    if (voucher.status !== "pending") {
      throw new HttpError({
        title: "cannot_delete",
        detail: "Ch·ªâ c√≥ th·ªÉ x√≥a phi·∫øu kho ƒëang ch·ªù duy·ªát",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    await voucher.deleteOne();
    res.status(StatusCodes.OK).json({ success: true, data: {} });
  } catch (error) {
    next(error);
  }
};

// @desc    Ph√™ duy·ªát phi·∫øu kho
// @route   PATCH /api/stock/:id/approve
// @access  Public
export const approveStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;
    const userId = req.tokenPayload?._id;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id).populate("items.product");

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    if (voucher.status !== "pending") {
      throw new HttpError({
        title: "cannot_approve",
        detail: "Ch·ªâ c√≥ th·ªÉ ph√™ duy·ªát phi·∫øu kho ƒëang ch·ªù duy·ªát",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    console.log(`üîç Ph√™ duy·ªát phi·∫øu ${voucher.type}: ${voucher.voucherNumber}`);

    // CH·ªà ki·ªÉm tra t·ªìn kho cho phi·∫øu XU·∫§T kho
    if (voucher.type === "export") {
      console.log("üîç Ki·ªÉm tra t·ªìn kho cho phi·∫øu xu·∫•t kho...");

      for (const item of voucher.items) {
        const product = await Product.findById(item.product);

        if (!product) {
          return next(
            new HttpError({
              title: "product_not_found",
              detail: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t√™n "${item.productName}" (ID: ${item.product})`,
              code: StatusCodes.NOT_FOUND,
            })
          );
        }

        if (product.quantity < item.quantity) {
          return next(
            new HttpError({
              title: "insufficient_stock",
              detail: `Kh√¥ng ƒë·ªß t·ªìn kho cho s·∫£n ph·∫©m "${item.productName}". T·ªìn kho hi·ªán t·∫°i: ${product.quantity}, y√™u c·∫ßu: ${item.quantity}`,
              code: StatusCodes.BAD_REQUEST,
            })
          );
        }
      }
    } else if (voucher.type === "import") {
      console.log("üì¶ Ph√™ duy·ªát phi·∫øu nh·∫≠p kho - kh√¥ng c·∫ßn ki·ªÉm tra t·ªìn kho");
    }

    // C·∫≠p nh·∫≠t t·ªìn kho v√† t·∫°o l·ªãch s·ª≠
    for (const item of voucher.items) {
      const product = await Product.findById(item.product);
      if (!product) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ${item.product}, b·ªè qua...`);
        continue;
      }

      const quantityBefore = product.quantity;
      const quantityChange =
        voucher.type === "import" ? item.quantity : -item.quantity;
      const quantityAfter = quantityBefore + quantityChange;

      // ƒê·∫£m b·∫£o t·ªìn kho kh√¥ng √¢m (double check cho phi·∫øu xu·∫•t)
      if (quantityAfter < 0) {
        return next(
          new HttpError({
            title: "negative_stock",
            detail: `T·ªìn kho s·∫£n ph·∫©m "${item.productName}" s·∫Ω b·ªã √¢m sau khi xu·∫•t: ${quantityAfter}`,
            code: StatusCodes.BAD_REQUEST,
          })
        );
      }

      // C·∫≠p nh·∫≠t t·ªìn kho
      product.quantity = quantityAfter;
      await product.save();

      // T·∫°o l·ªãch s·ª≠ stock
      await StockHistory.create({
        product: item.product,
        productName: item.productName,
        type: voucher.type,
        quantityBefore,
        quantityChange,
        quantityAfter,
        reason: voucher.reason,
        relatedVoucher: voucher._id,
        voucherNumber: voucher.voucherNumber,
        relatedOrder: voucher.relatedOrder,
        createdBy: userId,
        notes: item.note,
      });

      console.log(
        `üìä C·∫≠p nh·∫≠t t·ªìn kho ${
          item.productName
        }: ${quantityBefore} ‚Üí ${quantityAfter} (${
          quantityChange > 0 ? "+" : ""
        }${quantityChange})`
      );
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu
    voucher.status = "approved";
    voucher.approvedBy = new Types.ObjectId(userId);
    voucher.approvedAt = new Date();
    await voucher.save();

    // üéØ T·ª∞ ƒê·ªòNG T·∫†O GIAO D·ªäCH T√ÄI CH√çNH
    try {
      if (voucher.type === "import") {
        console.log(`üí∏ T·∫°o giao d·ªãch chi cho phi·∫øu nh·∫≠p kho...`);
        await TransactionService.createFromImportVoucher(
          voucher._id,
          voucher.totalValue || 0,
          new Types.ObjectId(userId)
        );
      } else if (voucher.type === "export") {
        console.log(`üìà T·∫°o giao d·ªãch gi√° v·ªën cho phi·∫øu xu·∫•t kho...`);
        const totalCostValue = voucher.items.reduce((total, item) => {
          return total + (item.costPrice || 0) * item.quantity;
        }, 0);

        await TransactionService.createFromExportVoucher(
          voucher._id,
          totalCostValue,
          new Types.ObjectId(userId)
        );
      }
    } catch (transactionError) {
      console.error(
        "‚ö†Ô∏è L·ªói t·∫°o giao d·ªãch (kh√¥ng ·∫£nh h∆∞·ªüng ph√™ duy·ªát phi·∫øu):",
        transactionError
      );
    }

    console.log(
      `‚úÖ ƒê√£ ph√™ duy·ªát phi·∫øu ${voucher.type} kho: ${voucher.voucherNumber}`
    );
    jsonOne(res, StatusCodes.OK, voucher);
  } catch (error) {
    next(error);
  }
};

// @desc    T·ª´ ch·ªëi phi·∫øu kho
// @route   PATCH /api/stock/:id/reject
// @access  Public
export const rejectStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;
    const { rejectionReason } = req.body;
    const userId = req.tokenPayload?._id;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id);

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    if (voucher.status !== "pending") {
      throw new HttpError({
        title: "cannot_reject",
        detail: "Ch·ªâ c√≥ th·ªÉ t·ª´ ch·ªëi phi·∫øu kho ƒëang ch·ªù duy·ªát",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    voucher.status = "rejected";
    voucher.rejectedBy = new Types.ObjectId(userId);
    voucher.rejectedAt = new Date();
    voucher.rejectionReason = rejectionReason;
    await voucher.save();

    console.log(`‚ùå ƒê√£ t·ª´ ch·ªëi phi·∫øu kho: ${voucher.voucherNumber}`);
    jsonOne(res, StatusCodes.OK, voucher);
  } catch (error) {
    next(error);
  }
};

// @desc    H·ªßy phi·∫øu kho
// @route   PATCH /api/stock/:id/cancel
// @access  Public
export const cancelStockVoucher = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new HttpError({
        title: "invalid_id",
        detail: `ID kh√¥ng h·ª£p l·ªá: ${id}`,
        code: StatusCodes.BAD_REQUEST,
      });
    }

    const voucher = await Stock.findById(id);

    if (!voucher) {
      throw new HttpError({
        title: "voucher_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y phi·∫øu kho v·ªõi id ${id}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    if (voucher.status === "approved") {
      throw new HttpError({
        title: "cannot_cancel",
        detail: "Kh√¥ng th·ªÉ h·ªßy phi·∫øu kho ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    voucher.status = "cancelled";
    await voucher.save();

    console.log(`üö´ ƒê√£ h·ªßy phi·∫øu kho: ${voucher.voucherNumber}`);
    jsonOne(res, StatusCodes.OK, voucher);
  } catch (error) {
    next(error);
  }
};

// @desc    L·∫•y l·ªãch s·ª≠ kho
// @route   GET /api/stock/history
// @access  Public
export const getStockHistory = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const filter: any = {};

    if (req.query.type) filter.type = req.query.type;

    if (req.query.productId) {
      const productId = req.query.productId as string;
      if (!mongoose.Types.ObjectId.isValid(productId)) {
        jsonOne(res, StatusCodes.BAD_REQUEST, {
          success: false,
          message: `ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá: ${productId}`,
        });
      }
      filter.product = productId;
    }

    if (req.query.voucherNumber) {
      filter.voucherNumber = new RegExp(req.query.voucherNumber as string, "i");
    }

    if (req.query.startDate || req.query.endDate) {
      filter.createdAt = {};
      if (req.query.startDate) {
        filter.createdAt.$gte = new Date(req.query.startDate as string);
      }
      if (req.query.endDate) {
        const endDate = new Date(req.query.endDate as string);
        endDate.setHours(23, 59, 59, 999);
        filter.createdAt.$lte = endDate;
      }
    }

    const { page, limit, search } = createPageOptions(req);

    if (search) {
      filter.$or = [
        { productName: new RegExp(search, "i") },
        { voucherNumber: new RegExp(search, "i") },
      ];
    }

    const skip = (page - 1) * limit;

    const [history, total] = await Promise.all([
      StockHistory.find(filter)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate("product", "name image")
        .populate("createdBy", "name email")
        .populate("relatedVoucher", "voucherNumber type status")
        .populate("relatedOrder", "_id"),
      StockHistory.countDocuments(filter),
    ]);

    jsonOne(res, StatusCodes.OK, {
      success: true,
      count: history.length,
      total,
      pagination: {
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
      data: history,
    });
  } catch (error) {
    next(error);
  }
};
export const createStockVoucherFromOrder = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const orderId = req.params.id;
    const userId = req.tokenPayload?._id;

    if (!orderId || !mongoose.Types.ObjectId.isValid(orderId)) {
      throw new HttpError({
        title: "invalid_order_id",
        detail: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c cung c·∫•p",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    // L·∫•y ƒë∆°n h√†ng k√®m th√¥ng tin s·∫£n ph·∫©m
    const order = await orderModel
      .findById(orderId)
      .populate("orderItems.product");
    if (!order) {
      throw new HttpError({
        title: "order_not_found",
        detail: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi id ${orderId}`,
        code: StatusCodes.NOT_FOUND,
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng (v√≠ d·ª• ch·ªâ t·∫°o phi·∫øu kho khi ƒë√£ thanh to√°n ho·∫∑c ho√†n th√†nh)
    if (!["completed"].includes(order.status)) {
      throw new HttpError({
        title: "invalid_order_status",
        detail:
          "Ch·ªâ c√≥ th·ªÉ t·∫°o phi·∫øu kho cho ƒë∆°n h√†ng ƒë√£ thanh to√°n ho·∫∑c ho√†n th√†nh",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    // Chu·∫©n b·ªã danh s√°ch items cho phi·∫øu kho, ki·ªÉm tra t·ªìn kho t·ª´ng s·∫£n ph·∫©m
    const items = [];

    for (const orderItem of order.orderItems) {
      const product = await Product.findById(orderItem.product);
      if (!product) {
        throw new HttpError({
          title: "product_not_found",
          detail: `S·∫£n ph·∫©m trong ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i, id: ${orderItem.product}`,
          code: StatusCodes.NOT_FOUND,
        });
      }

      if (product.quantity < orderItem.quantity) {
        throw new HttpError({
          title: "insufficient_stock",
          detail: `S·∫£n ph·∫©m ${product.name} kh√¥ng ƒë·ªß t·ªìn kho. T·ªìn kho: ${product.quantity}, Y√™u c·∫ßu: ${orderItem.quantity}`,
          code: StatusCodes.BAD_REQUEST,
        });
      }

      items.push({
        product: product._id,
        quantity: orderItem.quantity,
      });
    }

    if (items.length === 0) {
      throw new HttpError({
        title: "empty_items",
        detail: "ƒê∆°n h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ t·∫°o phi·∫øu kho",
        code: StatusCodes.BAD_REQUEST,
      });
    }

    // T·∫°o phi·∫øu kho xu·∫•t t·ª´ ƒë∆°n h√†ng (type export)
    const voucher = await Stock.create({
      type: "export", // gi·∫£ s·ª≠ m·∫∑c ƒë·ªãnh l√† phi·∫øu xu·∫•t kho khi t·∫°o t·ª´ ƒë∆°n h√†ng
      reason: `Xu·∫•t kho t·ª´ ƒë∆°n h√†ng ${order._id}`,
      items,
      notes: `Phi·∫øu kho t·∫°o t·ª± ƒë·ªông t·ª´ ƒë∆°n h√†ng ${order._id}`,
      relatedOrder: order._id,
      createdBy: userId,
    });

    // Populate c√°c tr∆∞·ªùng c·∫ßn thi·∫øt ƒë·ªÉ tr·∫£ v·ªÅ client
    await voucher.populate("createdBy", "lastName email");
    await voucher.populate("items.product", "name");

    console.log(
      `üìã ƒê√£ t·∫°o phi·∫øu kho t·ª´ ƒë∆°n h√†ng: ${voucher.voucherNumber || voucher._id}`
    );

    jsonOne(res, StatusCodes.CREATED, voucher);
  } catch (error) {
    next(error);
  }
};

import Transaction from "../models/transaction.model";
import Order from "../models/order.model";
import { Stock } from "../models/stock.model";
import type {
  ITransaction,
  CreateTransactionData,
} from "../interfaces/transaction.interface";
import type { Types } from "mongoose";

export class TransactionService {
  /**
   * üéØ T·∫†O GIAO D·ªäCH T·ª∞ ƒê·ªòNG T·ª™ ƒê·ª†N H√ÄNG
   * ƒê∆∞·ª£c g·ªçi khi ƒë∆°n h√†ng chuy·ªÉn sang tr·∫°ng th√°i "paid"
   */
  static async createFromOrderPayment(
    orderId: Types.ObjectId,
    orderAmount: number,
    paymentMethod: string,
    createdBy: Types.ObjectId
  ): Promise<ITransaction> {
    try {
      const order = await Order.findById(orderId).populate(
        "user",
        "firstName lastName email"
      );
      if (!order) {
        throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
      }

      // Type assertion for populated user
      const populatedUser = order.user as any;
      const customerName = populatedUser
        ? `${populatedUser.firstName || ""} ${
            populatedUser.lastName || ""
          }`.trim()
        : "";

      const transaction = new Transaction({
        type: "income",
        category: "order",
        amount: orderAmount,
        description: `Thu ti·ªÅn ƒë∆°n h√†ng #${orderId.toString().slice(-8)}`,
        paymentMethod,
        relatedOrder: orderId,
        relatedCustomer: order.user,
        createdBy,
        transactionDate: new Date(),
        notes: `Thanh to√°n ƒë∆°n h√†ng t·ª´ kh√°ch h√†ng ${customerName}`,
        metadata: {
          orderNumber: orderId.toString().slice(-8),
          customerInfo: customerName,
          autoCreated: true,
        },
      });

      await transaction.save();
      console.log(
        `‚úÖ ƒê√£ t·∫°o giao d·ªãch thu t·ª´ ƒë∆°n h√†ng: ${transaction.transactionNumber}`
      );
      return transaction;
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o giao d·ªãch t·ª´ ƒë∆°n h√†ng:", error);
      throw error;
    }
  }

  /**
   * üéØ T·∫†O GIAO D·ªäCH T·ª∞ ƒê·ªòNG T·ª™ PHI·∫æU NH·∫¨P KHO
   * ƒê∆∞·ª£c g·ªçi khi phi·∫øu nh·∫≠p kho ƒë∆∞·ª£c duy·ªát
   */
  static async createFromImportVoucher(
    voucherId: Types.ObjectId,
    totalValue: number,
    createdBy: Types.ObjectId
  ): Promise<ITransaction> {
    try {
      const voucher = await Stock.findById(voucherId);
      if (!voucher) {
        throw new Error("Kh√¥ng t√¨m th·∫•y phi·∫øu kho");
      }

      const transaction = new Transaction({
        type: "expense", // Chi ti·ªÅn mua h√†ng
        category: "stock", // Danh m·ª•c kho
        amount: totalValue,
        description: `Chi ph√≠ nh·∫≠p kho - ${voucher.voucherNumber}`,
        paymentMethod: "bank_transfer", // Th∆∞·ªùng chuy·ªÉn kho·∫£n cho nh√† cung c·∫•p
        relatedVoucher: voucherId,
        createdBy,
        transactionDate: new Date(),
        notes: voucher.reason,
        metadata: {
          voucherNumber: voucher.voucherNumber,
          voucherType: "import",
          autoCreated: true,
        },
      });

      await transaction.save();
      console.log(
        `‚úÖ ƒê√£ t·∫°o giao d·ªãch chi t·ª´ phi·∫øu nh·∫≠p kho: ${transaction.transactionNumber}`
      );
      return transaction;
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o giao d·ªãch t·ª´ phi·∫øu nh·∫≠p kho:", error);
      throw error;
    }
  }

  /**
   * üéØ T·∫†O GIAO D·ªäCH T·ª∞ ƒê·ªòNG T·ª™ PHI·∫æU XU·∫§T KHO
   * ƒê∆∞·ª£c g·ªçi khi phi·∫øu xu·∫•t kho ƒë∆∞·ª£c duy·ªát (ghi nh·∫≠n gi√° v·ªën)
   */
  static async createFromExportVoucher(
    voucherId: Types.ObjectId,
    totalCostValue: number,
    createdBy: Types.ObjectId
  ): Promise<ITransaction> {
    try {
      const voucher = await Stock.findById(voucherId);
      if (!voucher) {
        throw new Error("Kh√¥ng t√¨m th·∫•y phi·∫øu kho");
      }

      const transaction = new Transaction({
        type: "expense", // Chi ph√≠ gi√° v·ªën h√†ng b√°n
        category: "stock", // Danh m·ª•c kho
        amount: totalCostValue,
        description: `Gi√° v·ªën h√†ng b√°n - ${voucher.voucherNumber}`,
        paymentMethod: "other", // Kh√¥ng ph·∫£i thanh to√°n th·ª±c t·∫ø
        relatedVoucher: voucherId,
        relatedOrder: voucher.relatedOrder,
        createdBy,
        transactionDate: new Date(),
        notes: `Ghi nh·∫≠n gi√° v·ªën khi xu·∫•t kho: ${voucher.reason}`,
        metadata: {
          voucherNumber: voucher.voucherNumber,
          voucherType: "export",
          autoCreated: true,
        },
      });

      await transaction.save();
      console.log(
        `‚úÖ ƒê√£ t·∫°o giao d·ªãch gi√° v·ªën t·ª´ phi·∫øu xu·∫•t kho: ${transaction.transactionNumber}`
      );
      return transaction;
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o giao d·ªãch t·ª´ phi·∫øu xu·∫•t kho:", error);
      throw error;
    }
  }

  /**
   * üéØ T·∫†O GIAO D·ªäCH TH·ª¶ C√îNG
   * Cho ph√©p admin t·∫°o giao d·ªãch th·ªß c√¥ng
   */
  static async createManualTransaction(
    data: CreateTransactionData,
    createdBy: Types.ObjectId
  ): Promise<ITransaction> {
    try {
      const transaction = new Transaction({
        ...data,
        createdBy,
        transactionDate: data.transactionDate || new Date(),
        metadata: {
          ...data.metadata,
          autoCreated: false, // ƒê√°nh d·∫•u t·∫°o th·ªß c√¥ng
        },
      });

      await transaction.save();
      console.log(
        `‚úÖ ƒê√£ t·∫°o giao d·ªãch th·ªß c√¥ng: ${transaction.transactionNumber}`
      );
      return transaction;
    } catch (error) {
      console.error("‚ùå L·ªói t·∫°o giao d·ªãch th·ªß c√¥ng:", error);
      throw error;
    }
  }

  /**
   * üéØ T√çNH TH·ªêNG K√ä GIAO D·ªäCH
   */
  static async getTransactionSummary(startDate?: Date, endDate?: Date) {
    try {
      const matchCondition: any = {};

      if (startDate || endDate) {
        matchCondition.transactionDate = {};
        if (startDate) matchCondition.transactionDate.$gte = startDate;
        if (endDate) matchCondition.transactionDate.$lte = endDate;
      }

      const summary = await Transaction.aggregate([
        { $match: matchCondition },
        {
          $group: {
            _id: null,
            totalIncome: {
              $sum: {
                $cond: [{ $eq: ["$type", "income"] }, "$amount", 0],
              },
            },
            totalExpense: {
              $sum: {
                $cond: [{ $eq: ["$type", "expense"] }, "$amount", 0],
              },
            },
            orderIncome: {
              $sum: {
                $cond: [
                  {
                    $and: [
                      { $eq: ["$type", "income"] },
                      { $eq: ["$category", "order"] },
                    ],
                  },
                  "$amount",
                  0,
                ],
              },
            },
            stockExpense: {
              $sum: {
                $cond: [
                  {
                    $and: [
                      { $eq: ["$type", "expense"] },
                      { $eq: ["$category", "stock"] },
                    ],
                  },
                  "$amount",
                  0,
                ],
              },
            },
            transactionCount: { $sum: 1 },
            incomeCount: {
              $sum: {
                $cond: [{ $eq: ["$type", "income"] }, 1, 0],
              },
            },
            expenseCount: {
              $sum: {
                $cond: [{ $eq: ["$type", "expense"] }, 1, 0],
              },
            },
          },
        },
      ]);

      const result = summary[0] || {
        totalIncome: 0,
        totalExpense: 0,
        orderIncome: 0,
        stockExpense: 0,
        transactionCount: 0,
        incomeCount: 0,
        expenseCount: 0,
      };

      return {
        ...result,
        netAmount: result.totalIncome - result.totalExpense,
        averageTransaction:
          result.transactionCount > 0
            ? (result.totalIncome + result.totalExpense) /
              result.transactionCount
            : 0,
      };
    } catch (error) {
      console.error("‚ùå L·ªói t√≠nh th·ªëng k√™ giao d·ªãch:", error);
      throw error;
    }
  }

  /**
   * üéØ PH√ÇN T√çCH THEO DANH M·ª§C
   */
  static async getCategoryBreakdown(startDate?: Date, endDate?: Date) {
    try {
      const matchCondition: any = {};

      if (startDate || endDate) {
        matchCondition.transactionDate = {};
        if (startDate) matchCondition.transactionDate.$gte = startDate;
        if (endDate) matchCondition.transactionDate.$lte = endDate;
      }

      const breakdown = await Transaction.aggregate([
        { $match: matchCondition },
        {
          $group: {
            _id: "$category",
            income: {
              $sum: {
                $cond: [{ $eq: ["$type", "income"] }, "$amount", 0],
              },
            },
            expense: {
              $sum: {
                $cond: [{ $eq: ["$type", "expense"] }, "$amount", 0],
              },
            },
            count: { $sum: 1 },
          },
        },
        {
          $project: {
            category: "$_id",
            income: 1,
            expense: 1,
            count: 1,
            _id: 0,
          },
        },
        { $sort: { income: -1 } },
      ]);

      return breakdown;
    } catch (error) {
      console.error("‚ùå L·ªói ph√¢n t√≠ch danh m·ª•c:", error);
      throw error;
    }
  }
}
